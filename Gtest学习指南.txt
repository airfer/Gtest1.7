************************************************************************************************************************
                                                    学习指南
************************************************************************************************************************

一、构建指导以及Makefile解析

（1）构建指导
       在README文件中，给出了多种项目的构建指导方法，其中最常用的就是通用构建指导，其细节请参考README文件（115行）。一般来
       说都会将其构建的方法写入Makefile文件中，以便以后重复调用。

（2）Makefile文件样例解析
       这里说的Makefile样例，在目录../make下，其下有十个文件，分别为Makefile1至Makefile10,每一个Makefile对应与目录 ../samples
       下面的sample_unitteset.cc 文件，如果想编译运行那 一个文件，只须去掉Makefile后的数字即可，比如将Makefile3 变为 Makefile。

       Makefile编写规则不熟悉的话，可以自行百度学习，在这里说一些修改的方法。以Makefile1为例，参见第79行，sample1.o 是编译后的
       目标文件，82行的sample1_unittest.o 为根据单元测试框架编译后所生成的目标文件，sample1_unittest 则为链接后生成的可执行文件。
 
（3）Makefile 编写
       如果在gtest下编辑自己的程序，只需要修改以上所述的部分即可，但是如果将自己所写程序放在其他的位置下则需要修改第22行的
       GTEST_DIR 和第25行的 USER_DIR。具体编写过程中出现的问题，还需要根据实际情况判断。

二、samples 样例解析

（1）sample1：用于理解最基本的过程测试
     在sample1中，定义了两个函数：int Factorial(int n) ----用于求n的阶乘    bool IsPrime(intn)---用于判断一个数是否为质数。详情
     见sample1.h, 具体代码实现见sample1.cc。

     sample1_unittest.cc 是利用测试框架编写的测试代码，简述了如何通过3步来编写测试代码，实例代码非常清晰明了，请查看。

（2）sample2：用于理解最基本的对象测试
     在sample2中，定义了一个MyString的类，类中定义了几个方法，sample2_unittest.cc则是针对MyString这个类中的成员函数设计的单元测
     试方法，整个测试过程非常清晰，强烈建议查看相关文件源码，其中注释解释的非常清楚。

（3）sample3: 用于理解测试框架的一个高级特性，测试固件。
     在sample3中，首先定义了一个基于单链表的队列，然后定义了对队列操作的一系列方法。而sample3_unittest.cc则对队列中定义的函数进
     行测试，测试过程非常简洁，翻译已添加，请查看

（4）sample4: 理解测试固件与超级测试固件之间的不同。
     在sample4中，我们可以定义超级测试固件，然后将我们所需要的测试固件从超级测试固件中派生。sample4_unittest.cc中定义了一个测试
     时间的函数，所以测试用例的执行时间都可以被检测到。我们可以自己从超级固件中派生出我们自己的测试固件，然后在其中添加我们自己
     的逻辑，测试的过程清晰明了，翻译已添加，请查看
